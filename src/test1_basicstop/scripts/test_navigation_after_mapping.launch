<launch>

    <arg name="use_rosbot" default="true"/>
    <arg name="use_gazebo" default="false"/>

    <node pkg="gmapping" type="slam_gmapping" name='gmapping_node' output='log'>
        <param name="base_frame" value="base_link"/>
        <param name="odom_frame" value="odom"/>
        <param name="delta" value="0.01"/>
        <param name="xmin" value="-5"/>
        <param name="ymin" value="-5"/>
        <param name="xmax" value="5"/>
        <param name="ymax" value="5"/>
        <param name="maxUrange" value="5"/>
        <param name="map_update_interval" value="1"/>
        <param name="linearUpdate" value="0.05"/>
        <param name="angularUpdate" value="0.05"/>
        <param name="temporalUpdate" value="0.1"/>
        <param name="particles" value="100"/>
    </node>

    <!-- Transform for getting the lidar tf in place -->
    <node if="$(arg use_rosbot)" pkg="tf" type="static_transform_publisher" name="laser_tf_broadcaster" args="0 0 0 3.14 0 0 base_link laser_frame 100" />

    <!-- Transform for getting the Camera tf in place and camera clipping node for depth -->
    <node if="$(arg use_rosbot)" pkg="tf" type="static_transform_publisher" name="ROSbot_camera" args="-0.04 0 0.15 0 0 0 base_link camera_link 10" />
    <node if="$(arg use_rosbot)" pkg="husarion_ros" type="depth_clipping_node" name="depth_clipping_node"/>

    <node if="$(arg use_rosbot)" pkg="husarion_ros" type="serial_bridge.sh" name="odometry_serial_bridge"/>

    <!-- If running in gazebo, start gazebo environment -->
    <include if="$(arg use_gazebo)" file="$(find rosbot_gazebo)/launch/rosbot_world.launch"/>
    <include if="$(arg use_gazebo)" file="$(find rosbot_description)/launch/rosbot_gazebo.launch"/>

    <node if="$(arg use_rosbot)" pkg="rplidar_ros" type="rplidarNode" name="rplidar">
        <param name="angle_compensate" type="bool" value="true"/>
        <param name="serial_baudrate" type="int" value="115200"/><!--model A2 (ROSbot 2.0) -->
    </node>

    <!-- Used to publish pose of robot as a tf -->
    <!--node if="$(arg use_rosbot)" pkg="treasure-retriever" type="pose_to_tf.py" name="pose_to_tf"/-->
    <!--node if="$(arg use_rosbot)" pkg="test1_basicstop" type="test_tf.py" name="pose_to_tf2"/-->
    <node if="$(arg use_rosbot)" pkg="rosbot_webui" type="pose_to_tf_transform" name="pose_to_tf_transform" required="true"/>
    <node if="$(arg use_rosbot)" pkg="rosbot_webui" type="tf_to_pose" name="tf_to_pose" required="true" output="screen" />
    <!-- node if="$(arg use_rosbot)" pkg="test1_basicstop" type="wandering.py" name="wandering"/-->

    <!-- Allows for keyboard control of robot -->
    <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard" output="screen"/>

    <!-- loading the robot's specification to show feature on rviz -->
    <include if="$(arg use_rosbot)" file="$(find rosbot_description)/launch/rosbot_gazebo.launch"/>
    <!-- <node pkg="rviz" type="rviz" name="rviz"/> -->

    <!-- Map server -->
    <arg name="map_file" default="$(find rosbot_navigation)/maps/map.yaml"/>
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"/>

    <!-- Localization -->
    <node pkg="amcl" type="amcl" name="amcl" output="screen">
    <remap from="scan" to="/scan"/>
    <param name="odom_frame_id" value="odom"/>
    <param name="odom_model_type" value="diff-corrected"/>
    <param name="base_frame_id" value="base_link"/>
    <param name="update_min_d" value="0.1"/>
    <param name="update_min_a" value="0.2"/>
    <param name="min_particles" value="500"/>
    </node>

    <!-- Move base -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find rosbot_navigation)/config/costmap_common_params.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find rosbot_navigation)/config/costmap_common_params.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find rosbot_navigation)/config/local_costmap_params.yaml" command="load"/>
    <rosparam file="$(find rosbot_navigation)/config/global_costmap_params.yaml" command="load"/>
    <rosparam file="$(find rosbot_navigation)/config/trajectory_planner.yaml" command="load"/>
    <param name="move_base/DWAPlannerROS/yaw_goal_tolerance" value="1.0"/>
    <param name="move_base/DWAPlannerROS/xy_goal_tolerance" value="1.0"/>
    </node>

</launch>
